name: Migrate Releases

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  migrate:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          clean: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub requests

      - name: Migrate PrtivateLIMEs APK assets
        env:
          MIGRATE_TOKEN: ${{ secrets.MIGRATE_TOKEN }}
          OLD_OWNER: areteruhiro
          OLD_REPO: PrtivateLIMEs
          NEW_OWNER: areteruhiro
          NEW_REPO: LIMEs
        run: |
          if [ -z "$MIGRATE_TOKEN" ]; then
            echo "ERROR: MIGRATE_TOKEN is empty" >&2
            exit 1
          fi

          python << 'EOF'
          import os, requests, tempfile
          from github import Github
          from github.GithubException import UnknownObjectException

          token = os.environ['MIGRATE_TOKEN']
          src = Github(token).get_repo(f"{os.environ['OLD_OWNER']}/{os.environ['OLD_REPO']}")
          dst = Github(token).get_repo(f"{os.environ['NEW_OWNER']}/{os.environ['NEW_REPO']}")

          releases = list(src.get_releases())
          if not releases:
              print("No releases found in source repository.")
              exit(0)

          rel = releases[0]  # 最新リリース
          tag = rel.tag_name

          try:
              dst.get_release(tag)
              print(f"→ Skipping existing release: {tag}")
              exit(0)
          except UnknownObjectException:
              pass

          print(f"→ Migrating release: {tag}")
          new_rel = dst.create_git_release(
              tag=tag,
              name=rel.title or tag,
              message=rel.body or "",
              draft=rel.draft,
              prerelease=rel.prerelease
          )

          session = requests.Session()
          session.headers.update({
              'Authorization': f'token {token}',
              'Accept': 'application/octet-stream',
              'User-Agent': 'github-release-migration-script'
          })

          uploaded = False
          for asset in rel.get_assets():

              if not (asset.name.startswith("PrtivateLIMEs-") and asset.name.lower().endswith(".apk")):
                  print(f"   • skipping asset: {asset.name}")
                  continue

              print(f"   • matched target asset: {asset.name}")
              asset_url = f"https://api.github.com/repos/{os.environ['OLD_OWNER']}/{os.environ['OLD_REPO']}/releases/assets/{asset.id}"
              with session.get(asset_url, stream=True, allow_redirects=True) as r:
                  if r.status_code != 200:
                      print(f"⚠️ Failed to download asset {asset.name}, status: {r.status_code}")
                      exit(1)
                  with tempfile.NamedTemporaryFile(delete=False, suffix=".apk") as tmp:
                      for chunk in r.iter_content(chunk_size=8192):
                          tmp.write(chunk)
                      tmp_path = tmp.name
              new_rel.upload_asset(path=tmp_path, name=asset.name, label=asset.name)
              os.remove(tmp_path)
              uploaded = True
              break 

          if not uploaded:
              print("⚠️ No matching PrtivateLIMEs-*.apk asset found.")
          else:
              print("✅ Migration complete")
          EOF
