name: Migrate Releases

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  migrate:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          clean: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub requests

      - name: Migrate releases from LIMEs to PrtivateLIMEs
        env:
          MIGRATE_TOKEN: ${{ secrets.MIGRATE_TOKEN }}
          OLD_OWNER: areteruhiro
          OLD_REPO: PrtivateLIMEs
          NEW_OWNER: areteruhiro
          NEW_REPO: LIMEs
        run: |
          if [ -z "$MIGRATE_TOKEN" ]; then
            echo "ERROR: MIGRATE_TOKEN is empty" >&2
            exit 1
          fi

          python << 'EOF'
          import os, requests, tempfile
          from github import Github
          from github.GithubException import UnknownObjectException

          token = os.environ['MIGRATE_TOKEN']
          src = Github(token).get_repo(f"{os.environ['OLD_OWNER']}/{os.environ['OLD_REPO']}")
          dst = Github(token).get_repo(f"{os.environ['NEW_OWNER']}/{os.environ['NEW_REPO']}")

          for rel in src.get_releases():
              tag = rel.tag_name
              try:
                  # すでに存在するかチェック
                  dst.get_release(tag)
                  print(f"→ Skipping existing release: {tag}")
                  continue
              except UnknownObjectException:
                  pass

              print(f"→ Migrating release: {tag}")
              new_rel = dst.create_git_release(
                  tag=tag,
                  name=rel.title or tag,
                  message=rel.body or "",
                  draft=rel.draft,
                  prerelease=rel.prerelease
              )

              for asset in rel.get_assets():
                  # ソースコードアセットを除外
                  if asset.name.endswith(('.zip', '.tar.gz', '.tar.bz2', '.tar.xz')):
                      print(f"   • Skipping source code asset: {asset.name}")
                      continue

                  print(f"   • asset: {asset.name}")
                  r = requests.get(asset.browser_download_url,
                                   headers={'Authorization': f'token {token}'})
                  with tempfile.NamedTemporaryFile(delete=False) as tmp:
                      tmp.write(r.content)
                      tmp.flush()
                      new_rel.upload_asset(
                          path=tmp.name,
                          name=asset.name,
                          label=asset.label or asset.name
                      )
          print("✅ Migration complete")
          EOF
